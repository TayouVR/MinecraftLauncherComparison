---
const { launchers, values } = Astro.props as { launchers: LauncherDetails[], values: { identifier: string, value: string[] }[] };

const availableModloaders = [...new Set(values.flatMap(v => v.value))];
---
<tr><th colspan={launchers.length + 1}>Modloaders</th></tr>
{availableModloaders.map(modloader => (
<tr>
    <td class="modloader">
        {modloader === 'forge' ? (
                <img loading="lazy" alt="Forge" src="/src/assets/forge.svg" />
        ) : modloader === 'fabric' ? (
                <img loading="lazy" alt="FabricMC" src="/src/assets/fabric.png" />
        ) : modloader === 'quilt' ? (
                <img loading="lazy" alt="QuiltMC" src="/src/assets/quilt.svg" />
        ) : modloader === 'neoforge' ? (
                <img loading="lazy" alt="Neoforge" src="/src/assets/neoforged.png" />
        ) : modloader === 'legacy-fabric' ? (
                <img loading="lazy" alt="Legacy Fabric" src="/src/assets/legacy-fabric.png" />
        ) : ''}
        <span>{modloader}</span>
    </td>
    { launchers.map(launcher => (
            <td class:list={[launcher.identifier, values.find(v => v.identifier === launcher.identifier)?.value.includes(modloader) ? 'yes' : 'no' ]}>
                { values.find(v => v.identifier === launcher.identifier)?.value.includes(modloader) ? 'Yes' : 'No' }
            </td>
    ))}
</tr>
))}

<style>
    .modloader {
        display: flex;
        flex-direction: row;
        justify-content: left;
        align-items: center;
        margin: 5px;
        height: 2em;
        overflow: hidden;
        gap: 10px;

        img {
            height: 2em;
            border-radius: 2px;
        }
        span {
            text-wrap: nowrap;
        }
    }
</style>